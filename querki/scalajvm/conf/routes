# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                           @controllers.ClientController.index
GET     /robots.txt					@controllers.Application.robots

GET     /help/                      @controllers.ClientController.space(userName = "systemUser", spaceId = "documentation")
GET     /help/:thingId              @controllers.ClientController.thingRedirect(userName = "systemUser", spaceId = "documentation", thingId)

# The direct-signup pathway:
GET     /signup/                    @controllers.ClientController.signup
POST    /signupStart/               @controllers.LoginController.signupStart()

# The old way to address a Space, now replaced by the new client:
GET     /u/:userName/:spaceId/      @controllers.ClientController.space(userName, spaceId)
# This should also work without the slash, because that's an easy error to make:
GET     /u/:userName/:spaceId       @controllers.ClientController.spaceNoSlash(userName, spaceId)

# The "raw" version of a page, mainly intended for crawlers that can't cope with the client:
GET     /raw/:userName/:spaceId/:thingId @controllers.RawController.thing(userName, spaceId, thingId)

# Note that these are still direct pages, not through the Client:
GET     /u/:userName/:spaceId/_handleInvite @controllers.LoginController.handleInvite(userName, spaceId)
POST    /u/:userName/:spaceId/_handleInvite @controllers.LoginController.signup(userName, spaceId)
POST    /u/:userName/:spaceId/_handleInvite2 @controllers.LoginController.handleInvite2(userName, spaceId)
POST    /u/:userName/:spaceId/_joinLogin  @controllers.LoginController.joinlogin(userName, spaceId)
GET     /u/:userName/:spaceId/_joinSpace  @controllers.LoginController.joinSpace(userName, spaceId)
GET     /u/:userName/:spaceId/_getCollaborators @controllers.LoginController.getCollaborators(userName, spaceId, q)

POST    /u/:userName/:spaceId/_photoUpload   @controllers.PhotoController.upload(userName, spaceId, thingId)

GET     /u/:userName/:spaceId/_export.xml  @controllers.ClientController.exportSpace(userName, spaceId)

# API CALLS
POST    /u/:userName/:spaceId/_apiRequest @controllers.ClientController.apiRequest(userName, spaceId)
POST    /_apiRequest                @controllers.ClientController.rawApiRequest
GET     /u/:userName/:spaceId/_marcoPolo @controllers.ClientController.marcoPolo(userName, spaceId, propId)
POST    /_upload                    @controllers.ClientController.upload(targetActorPath)

# Display some root-level page
GET     /c/                         @controllers.ClientController.showClient

# Root-level version of the Client, which gets loaded when you click an Unsubscribe link
GET     /unsub                      @controllers.ClientController.unsub(unsubInfo)

POST    /dologin                    @controllers.LoginController.dologin
POST    /clientlogin                @controllers.LoginController.clientlogin
GET     /logout                     @controllers.LoginController.logout

GET     /sendPasswordReset          @controllers.LoginController.sendPasswordReset
POST    /sendPasswordReset          @controllers.LoginController.doSendPasswordReset
GET     /resetPassword              @controllers.LoginController.resetPassword(email, expires:Long, hash)
POST    /resetPassword              @controllers.LoginController.doResetPassword(email, expiresMillis:Long, hash)

# Redirect pointers to Things to go to the Client: 
GET     /u/:userName/:spaceId/*thingId    @controllers.ClientController.thingRedirect(userName, spaceId, thingId)

# GraphQL API queries:
POST    /graphql/:userName/:spaceId  @controllers.GraphQLController.graphQL(userName, spaceId)

# JSON API inquiries:
# TODO: delete this entire code path, now that we have GraphQL:
GET     /json/:userName/:spaceId/:thingId @controllers.JsonController.json(userName, spaceId, thingId, propIdStr = "")
GET     /json/:userName/:spaceId/:thingId/:propId @controllers.JsonController.json(userName, spaceId, thingId, propId)

# Admin-only pages:
GET     /admin/dumpreadable/:spaceId  @controllers.AdminController.dumpSpaceReadable(spaceId)
GET     /admin/dumphistory/:spaceId   @controllers.AdminController.dumpSpaceSummary(spaceId, nRecords: Int = 1000, endAt: Long = 0)
GET     /admin/dumphistory/:spaceId/:nRecords   @controllers.AdminController.dumpSpaceSummary(spaceId, nRecords: Int, endAt: Long = 0)
GET     /admin/dumphistory/:spaceId/:nRecords/:endAt   @controllers.AdminController.dumpSpaceSummary(spaceId, nRecords: Int, endAt: Long)

# Serve scala files under the scalajs subproject to be used by sourcemaps.
# TODO: This route and its controller method should be removed for production
GET     /scalajs/*file              @controllers.Application.scalajsFile(file)
GET     /scala/*file                @controllers.Application.scalaSharedFile(file)

# Map static resources from the /public folder to the /assets URL path
#GET     /assets/*file               controllers.Assets.at(path="/public", file)
GET     /assets/*file               controllers.Assets.versioned(path="/public", file:Asset)
